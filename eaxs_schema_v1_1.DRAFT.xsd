<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xm="https://github.com/StateArchivesOfNorthCarolina/tomes-eaxs" targetNamespace="https://github.com/StateArchivesOfNorthCarolina/tomes-eaxs" elementFormDefault="qualified">
  <!--
  
  NOTE:
	This copy of the EAXS XSD was used by me to create notes and plan on how to extract email data for RATOM DarcMail.
	As of June 2019, there are mre useful notes in the actual EAXS templates: https://github.com/libratom/ratom-darcmail/tree/dev/ratom_darcmail/eaxs_templates
	
	IOW, the notes in this file represent my initial planning/thoughts.
		- Nitin, June 2019

  TODO: ???API STUFF:
      * You MUST read this before writing code: https://docs.python.org/3/library/email.parser.html#additional-notes
      * Instead of adding a key a la: ["darmail-incomplete"] you might want to think about adding methods or attributes instead IF you think that'll
      makes documenting these easier than adding keys. It will probably be the same. The advantage is that as a method, you can call this data in real-time
      instead of preparing it a priori. You can do message.eaxs.get_local_id(), etc.
      * Make sure you aren't calling for computation within the Jinja template. It should only have if/then statement to handle whether or not to write an element
      and insert the value.
      * Make sure you dedupe: You can hash the message as you wish for this functionality since it won't be a part of the EAXS itself.
        - How do you notate a duplicated message? Isn't it important to keep its location within a "Folder" element?
        - Actually NO: deduping LOSES the Folder name for the other message. The real way to handle this would be to use External Messages instead and point to the
        dupe file - but that too is confusing. Or is it? Either way, you probably want to keep a dict of message local ids and their hashes.
      * Reserve if None logic for the template. IOW, don't create wrapper functions that return EAXS' default value if an email.Message's method returns None.
        - This is because you want to disassociate the code from EAXS as much as reasonably possible. I just don't want to have to write functions inside templates.
        - But DO have SET custom attributes so you can use .get() which has a "failobj" param that can be used in the template to return the fallback value 
        required by EAXS.
      * I think you might want to use FTFY as a safety net before writing values. See if you can set this in a Jinja policy instead of having a wrapper method.
  -->
  <annotation>
    <documentation>Schema to define an XML document which can store the information found in a single e-mail account.</documentation>
    <documentation>Authored jointly by the State Archives of North Carolina and Smithsonian Institution Archives.</documentation>
    <documentation>Contact: State Archives of North Carolina | Phone: (919) 807-7310 | Email: archives@ncdcr.gov | Website: https://archives.ncdcr.gov</documentation>
  </annotation>
  <!-- DarcMail: Account() -->
  <element name="Account">
    <complexType>
      <sequence>
        <element name="EmailAddress" type="string" minOccurs="0" maxOccurs="unbounded"/>
        <element name="GlobalId" type="anyURI">
          <annotation>
            <documentation>Globally unique, permanent, absolute URI with no fragment conforming to the canonical form specified in RFC2396 as amended by RFC2732. This value once assigned must never be changed.</documentation>
            <documentation>Handles from the Handle System could be used but they must not contain the # character.</documentation>
            <documentation>Handles should be expressed as an URI with the syntax hdl:&lt;handle&gt; or urn:&lt;handle&gt;. This form simply specifies the raw handle and does not make any reference to a handle resolver.</documentation>
            <documentation>All messages and their child messages contained in this account can be identified globally using this GlobalId and appending the LocalId as a fragment(GlobalId#LocalId).</documentation>
          </annotation>
        </element>
        <element name="ReferencesAccount" type="xm:ref-account-type" minOccurs="0" maxOccurs="unbounded"/>
        <element name="Folder" type="xm:folder-type" minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
    </complexType>
  </element>
  <!-- DarcMail: ReferencesAccount() -->
  <complexType name="ref-account-type">
    <sequence>
      <element name="Href" type="anyURI">
        <annotation>
          <documentation>This should be identical to the GlobalId of the XML file for the target account.</documentation>
        </annotation>
      </element>
      <element name="EmailAddress" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="RefType" type="xm:account-ref-type"/>
    </sequence>
  </complexType>
  <!-- DarcMail: ReferencesAccount() -->
  <simpleType name="account-ref-type">
    <restriction base="string">
      <enumeration value="PreviousContent">
        <annotation>
          <documentation>The target contains previously archived messages from the same logical account as messages found here."</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SubsequentContent">
        <annotation>
          <documentation>The target contains messages subsequently archived from the same logical account as messages found here.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="Supplemental">
        <annotation>
          <documentation>The target contains messages that should be logically included with the messages found here.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SeeAlso">
        <annotation>
          <documentation>The target contains messages from some other account that may be of interest.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SeeInstead">
        <annotation>
          <documentation>Content found here is superseded entirely by the messages found in the target.</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <!-- DarcMail: Account().folders
  
  To close a "Folder" element, the template will need to count the number of opened "Folder" elements.
  If you determine a new Folder is a child of the current one, then increment the count.
  When the next Folder is NOT a child of the current folder, output @count * "</Folder> in the template and reset the count.
  -->
  <complexType name="folder-type">
    <sequence>
      <element name="Name" type="string"/>
      <element name="Message" type="xm:message-type" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Folder" type="xm:folder-type" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Mbox" type="xm:mbox-type" minOccurs="0">
        <annotation>
          <documentation>All of the messages in the archive that belong to this folder of this account are stored in an mbox file. This mbox file must use the mboxrd format and must use the end-of-line markers specified in the Eol child element of this Mbox element. Each message contained here must be use the RFC 2822 format as it would exist as it was sent over the wire.</documentation>
          <documentation>Individual messages may be retrieved from an mbox file by searching for the desired message using the message-id. For messages that do not have a message-id, the referrer must create an index to the mbox file by creating a hash for each message. Once this index has been created, the hash stored along with the message in this file can be used to locate the original message.</documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <!-- DarcMail: Account().folders[0].message[0] -->
  <complexType name="message-type">
    <annotation>
      <documentation>This serves to define a single RFC2822 Message.</documentation>
    </annotation>
    <sequence>
      <element name="RelPath" type="anyURI" minOccurs="0">
        <annotation>
          <documentation>URI component that when added to the path from which this XML document was accessed gives the URI for the root folder for which external body parts may be accessed. If not given "." is assumed.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: Account().folders[0].rel_path 
	  
	  Reread the documentation: "that when added ... ". This is so unclear.
	  -->
      <element name="LocalId" type="long"/>
      <!-- DarcMail: Account().folders[0].messages[0]["darcmail-local-id"]
      Needs to get added by DarcMail.
      -->
      <element name="MessageId" type="xm:message-id-type"/>
      <!-- DarcMail: Account().folders[0].messages[0]["message-id"]. 
      See "message-id-type" re: the "Supplied" attribute and whether you want to implement this.
      You might want a generic .create_message_id() method that can be called in the template if the message has no ID.
      
      Instead of "No Message ID Supplied" use a null value if possible along w/ @Supplied=false
      Empty strings are OK per: http://www.datypic.com/sc/xsd/t-xsd_string.html
      
      -->
      <element name="MimeVersion" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present then it is assumed that this message did not use any mime extensions.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: Account().folders[0].messages[0]["mime-version"]. -->
      <group ref="xm:message-headers"/>
      <!-- DarcMail:  Account().folders[0].messages[0]._headers
      The template should contain all the group element even if they are None. That way it's explicit if a message has no BCC etc. rather than implicit.
      
      BTW: I'm pretty sure you need to strip() each item in the header tuples. Sometimes they have line breaks, etc.
      Yes, you do. Current version doesn't appear to. I see some "&#13;" XML encoded returns.
      -->
      <element name="Header" type="xm:header-type" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>All header values found in the message should be placed here. Even those used to populate the contents of the standard messages headers. The minimum amount of transformation should be preformed on the original values. Any encoded words (as per RFC 2047) should be left as-is and not converted to Unicode.</documentation>
        </annotation>
      </element>
      <!-- DarcMail:  Account().folders[0].messages[0]._headers
      Todo: Need to figure out what the RFC 2047 thing means in practice.
      -->
      <element name="StatusFlag" type="xm:message-status-flag" minOccurs="0" maxOccurs="unbounded"/>
      <!-- 
      DarcMail: Account().folders[0].messages[0]["darcmail-status-flag"]
      Needs to get added by DarcMail.
      
      from https://wingware.com/psupport/python-manual/2.5/lib/mailbox-mboxmessage.html:
        The "R" and "O" flags are stored in the Status: header, and the "D", "F", and "A" flags are stored in the X-Status: header. The flags and headers typically appear in the order mentioned.
        
        * Also see the tables below on the page.
        Looks like the lookup dict @status in eaxs/MessageType.py is OK. But the current lookup in eaxs/MessageType.py only checks message["Status"]. 
        Sounds like you need to check message["X-Status"] too.
      
      Refs:
      https://stackoverflow.com/questions/5298285/detecting-if-an-email-is-a-delivery-status-notification-and-extract-informatio
      http://www.faqs.org/rfcs/rfc2060.html | search for "Flags"
      https://wiki2.dovecot.org/MailboxFormat/mbox#Dovecot.27s_Metadata
      -->
      <choice minOccurs="0">
        <element name="SingleBody" type="xm:single-body-type"/>
        <element name="MultiBody" type="xm:multi-body-type"/>
      <!-- DarcMail: Account().folders[0].messages[0].is_multipart()
      If False, use "SingleBody" element.
      Else, use "MultiBody".
      -->
      </choice>
      <element name="Incomplete" type="xm:incomplete-parse-type" minOccurs="0" maxOccurs="unbounded"/>
      <!--  DarcMail: Account().folders[0].messages[0]["darmail-incomplete"]
      Needs to get added by DarcMail.
      Should be a list of tuples: error message, error location (None if not known).
      
      But this ONLY be errors up to this point - i.e. once you're writing via the template you can't retroactively fill this in with future errors.
      So you need to calculate EOL and HASH **PRIOR** to this.
      -->
      <element name="Eol" type="xm:eol-type"/>
      <!-- DarcMail: Account().folders[0].messages[0]["darcmail-status-flag"]
      Needs to get added by DarcMail.
      
      See: eaxs/MessageType.py:83 and
      xml_help/CommonMethods.py:318:
      
      Rather than read the whole string message, you can probably inspect the EOL of the first iteration in walk():
      
        # might be less expensive to use "mess._payload[0].walk()" instead. Potentially less accurate though.
        for blob in mess.walk():
          blob = bytes(blob) # why not stay with a string?
          eol_tup = chr(blob[-2]), chr(blob[-1])
          break
        eol = "LF"
        if eol_tup == ("\r", "\n"):
          eol = "CRLF"
        elif eol_tup[1] == "\r":
          eol = "CR"
      -->
      <element name="Hash" type="xm:hash-type" minOccurs="0">
        <annotation>
          <documentation>This is the result of calculating the hash on the text string that begins with the F of the From_ line and includes the last eol character of the message. All messages end with a single eol marker. Before creating the hash, if the message ends with two or more eol markers, all but the first must be removed. If the message does not end with an eol marker, one must be added.</documentation>
        </annotation>
      </element>
      <!-- TODO: ??? Need to find "From" in walk() and build from there?
      I can't see how the current function in CommonMethods.py implements this correctly re: "Find" and EOL.
	  It doesn't look like Smithsonian does that either ...
      
      This is optional, so I'm tempted to skip it. A METS Manifest of each file seems like the better option. 
      At any rate, you need to use .walk() and do the hash in the manner that TOMES Packager does. The current one won't be able to handle really large blobs.
      I still don't think this is a good idea because the manner in which the message is interpreted impacts the hash rendering this fairly useless. Because 
      you would have to describe a lot more than just the HASH algorithm. You would have to descrine the decode charset.
      
      The only use here is for deduping but that presents a problem because it removes the Folder/Name concept for the other copies of the file.
      So, OK, from that POV keeping the HASH is useful at least when the account is indexed. So, yeah, you need to keep this element or at least hash in the search index.
      This really should be about hashing the bytes not the STRING as specified.
      
      BTW: CommonMethods.py from the current version in GitHub actually use MD5 even though documentation says SHA-256.
      -->
    </sequence>
  </complexType>
  <complexType name="message-id-type">
    <simpleContent>
      <extension base="string">
        <attribute name="Supplied" type="boolean" use="optional" default="false"/>
      </extension>
    </simpleContent>
  </complexType>
  <!-- It's actually unclear what Supplied means in terms of who's supplying it.
  I think it means that it DarcMail makes it, then Supplied=True.
  But "supplied" could mean that it's supplied by the message itself. -->
  <complexType name="single-body-type">
    <sequence>
      <annotation>
        <documentation>The CharSet, ContentName, ContentTypeComments, and ContentTypeParams are all part of the Content-Type header, and none should be present if the Content-Type header is not present.</documentation>
      </annotation>
      <element name="ContentType" type="string" minOccurs="0">
        <annotation>
          <documentation>This is just the MIME type / MIME sub type. If not present then text/plain is assumed.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: Account().folders[0].messages[0].get_content_type()
      
      Note, if there is no Content-Type, the method returns Account().folders[0].messages[0].get_default_type() aka 'text/plain' as required.
      -->
      <element name="Charset" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present, then US-ASCII is assumed.</documentation>
          <documentation>This is the character set originally used to encode the content of this multi-part body.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: Account().folders[0].messages[0].get_content_charset() # this is NOT the same as .get_charset()
      If None, use "us-ascii".
      
      It is unclear from the schema if this is really supposed to be uppercase.
      Per email.message.py "# RFC 2046, $4.1.2 says charsets are not case sensitive".
      
      This appears to be some code ideas you had. For what???
      
        >>> for i in filter(lambda x: x[0].lower() == "content-type", mess._headers): print(i)

        ('Content-Type', 'multipart/report; report-type="delivery-status"; boundary="_===435665940====server45.appriver.com===_"; language="us-en"')
         >>> mess.get_params(None, header = "Content-Type")
        [('multipart/report', ''), ('report-type', 'delivery-status'), ('boundary', '_===435665940====server45.appriver.com===_'), ('language', 'us-en')]
         >>> mess.get_params(None)
        [('multipart/report', ''), ('report-type', 'delivery-status'), ('boundary', '_===435665940====server45.appriver.com===_'), ('language', 'us-en')]
         >>> dict(mess.get_params(None))["language"]
        'us-en'
        
        """ The following refers to multitype only ...
        
         >>> dict(mess.get_params(None))["charset"]
        Traceback(most recent call last):
        File "<pyshell#128>", line 1, in < module >
        dict(mess.get_params(None))["charset"]
        KeyError: 'charset'
         >>> dict(mess.get_params(None)).get("charset")
         >>> dict(mess._payload[0].get_params(None)).get("charset")
        'utf-8'
        """
      -->
      <element name="ContentName" type="string" minOccurs="0"/>
      <!-- ??? check RFC-4021 -->
      <element name="ContentTypeComments" type="string" minOccurs="0"/>
      <!-- ??? check RFC-4021 -->
      <element name="ContentTypeParam" type="xm:parameter-type" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>Any other parameter found in the Content-Type header field except for id and name.</documentation>
        </annotation>
      </element>
      <!--     
      params = Account().folders[0].messages[0].get_params()
      if params is None:
        ???
      for param in params:
        n, v = param
        if n.lower() in ["id", "name"]: # not sure "id" will ever exist; but trying to comply with XSD.
          continue
        if "/" in n and v == "":
          continue
        <Name>, <Value> = n, v
       -->
      <element name="TransferEncoding" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present, "7-bit" is assumed.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: Account().folders[0].messages[0]["content-transfer-encoding"]
      
      This is where you'd get quopri etc.
      -->
      <element name="TransferEncodingComments" type="string" minOccurs="0"/>
      <!-- ??? check RFC-4021 -->
      <element name="ContentId" type="string" minOccurs="0"/>
      <!-- DarcMail: Account().folders[0].messages[0]["content-id"] -->
      <element name="ContentIdComments" type="string" minOccurs="0"/>
      <!-- ??? check RFC-4021 -->
      <element name="Description" type="string" minOccurs="0"/>
      <!-- DarcMail: Account().folders[0].messages[0]["content-description"]
      
      still check RFC-4021 because this isn't clear
      -->
      <element name="DescriptionComments" type="string" minOccurs="0"/>
      <!-- ??? check RFC-4021 -->
      <element name="Disposition" type="string" minOccurs="0"/>
      <!-- DarcMail: Account().folders[0].messages[0].get_content_disposition() -->
      <element name="DispositionFileName" type="string" minOccurs="0"/>
      <!-- DarcMail: Account().folders[0].messages[0].get_filename() -->
      <element name="DispositionComments" type="string" minOccurs="0"/>
      <!-- ??? check RFC-4021 -->
      <element name="DispositionParams" type="xm:parameter-type" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>Any other parameter found in the Content-Disposition header field except for filename.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: 
      
      params = Account().folders[0].messages[0].get_params(header="content-disposition")
      if params is None:
        ???
      for param in params:
        n, v = param
        if n.lower() in ["filename"]:
          continue
        if "/" in n and v == "":
          continue
        <Name>, <Value> = n, v
        
      Note: This is unique to SingleBody becuase it's plural: "paraMS".
      See top comment about XSD on how this is a mistake in MultiBody because it should be plural there as well.
      -->
      <element name="OtherMimeHeader" type="xm:header-type" minOccurs="0" maxOccurs="unbounded"/>
      <!-- Skip. This is completely unclear.
      Not currently implemented either.
      -->
      <choice minOccurs="0" maxOccurs="1">
        <element name="BodyContent" type="xm:int-body-content-type">
          <annotation>
            <documentation>This is textual or binary data that is stored in-line in this XML document that makes up the body of this entity. Along with the character set and transfer encoding used.</documentation>
          </annotation>
        </element>
        <element name="ExtBodyContent" type="xm:ext-body-content-type">
          <annotation>
            <documentation>This is a pointer to a file that contains the text or binary data that makes up the body of this entity. Along with the character set and transfer encoding used.</documentation>
          </annotation>
        </element>
        <element name="ChildMessage" type="xm:child-message-type"/>
        <!-- This doesn't appear to be implemented at all in current DarcMail.
        It's not clear from EAXS XSD what this is even supposed to mean.
        -->
      </choice>
      <element name="PhantomBody" type="string" minOccurs="0">
        <annotation>
          <documentation>Used for Content-Type message/external-body. US-ASCII character set is assumed.</documentation>
        </annotation>
      </element>
      <!-- Not currently implemented.
      Skip ???
      This is unclear. Where do I get the source of "external body"?
      -->
    </sequence>
  </complexType>
  <complexType name="multi-body-type">
  <!-- START Repeat of SingleBody header ... 
  Note: Just because this is ALMOST the same doesn't mean you should have a sub-template to share between SingleBody and MultiBody templates.
  That's going to get too confusing.
  -->
    <sequence>
      <annotation>
        <documentation>The Charset, ContentName, ContentTypeComments, and ContentTypeParams are all part of the Content-Type header, and none should be present if the Content-Type header is not present.</documentation>
      </annotation>
      <element name="ContentType" type="string" minOccurs="0">
        <annotation>
          <documentation>This is just the MIME type / MIME sub type. If not present then text/plain is assumed.</documentation>
        </annotation>
      </element>
      <element name="Charset" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present, then US-ASCII is assumed.</documentation>
          <documentation>This is the character set originally used to encode the content of this multi-part body.</documentation>
        </annotation>
      </element>
      <element name="ContentName" type="string" minOccurs="0"/>
      <element name="BoundaryString" type="string"/>
      <!-- Unique to MultiBody -->
      <element name="ContentTypeComments" type="string" minOccurs="0"/>
      <element name="ContentTypeParam" type="xm:parameter-type" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>Any other parameter found in the Content-Type header field except for id, name, and boundary string.</documentation>
        </annotation>
      </element>
      <element name="TransferEncoding" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present, "7-bit" is assumed.</documentation>
        </annotation>
      </element>
      <element name="TransferEncodingComments" type="string" minOccurs="0"/>
      <element name="ContentId" type="string" minOccurs="0"/>
      <element name="ContentIdComments" type="string" minOccurs="0"/>
      <element name="Description" type="string" minOccurs="0"/>
      <element name="DescriptionComments" type="string" minOccurs="0"/>
      <element name="Disposition" type="string" minOccurs="0"/>
      <element name="DispositionFileName" type="string" minOccurs="0"/>
      <element name="DispositionComments" type="string" minOccurs="0"/>
      <element name="DispositionParam" type="xm:parameter-type" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>Any other parameters found in the Content-Disposition header field except for filename.</documentation>
        </annotation>
      </element>
      <!-- Unique to MultiBody - singlular paraM -->
      <element name="OtherMimeHeader" type="xm:header-type" minOccurs="0" maxOccurs="unbounded"/>
      <!-- END Repeat of SingleBody header -->
      <element name="Preamble" type="string" minOccurs="0"/>
      <choice maxOccurs="unbounded">
        <element name="SingleBody" type="xm:single-body-type"/>
        <element name="MultiBody" type="xm:multi-body-type"/>
      </choice>
      <element name="Epilogue" type="string" minOccurs="0"/>
      <!-- Unique to MultiBody -->
    </sequence>
  </complexType>
  <complexType name="child-message-type">
    <sequence>
      <element name="LocalId" type="long"/>
      <element name="MessageId" type="xm:message-id-type"/>
      <element name="MimeVersion" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present then it is assumed that this message did not use any mime extensions.</documentation>
        </annotation>
      </element>
      <group ref="xm:message-headers"/>
      <element name="Header" type="xm:header-type" minOccurs="1" maxOccurs="unbounded"/>
      <choice minOccurs="0">
        <element name="SingleBody" type="xm:single-body-type"/>
        <element name="MultiBody" type="xm:multi-body-type"/>
      </choice>
      <element name="Incomplete" type="xm:incomplete-parse-type" minOccurs="0"/>
    </sequence>
  </complexType>
  <complexType name="int-body-content-type">
  <!--
  if get_payload() is a string and is_readable() 
  TODO: implement is_readable() 
  -->
    <sequence>
      <element name="Content" type="string">
        <annotation>
          <documentation>Content here is either wrapped in a CDATA section where all occurrences of ]]&gt; have been escaped as "]]&amp;gt; or without being wrapped in a CDATA section where all occurrences of &lt; and &amp; have been escaped as &amp;lt; and &amp;amp; respectively as well as all occurrences of ]]&gt; have been escaped as "]]&amp;gt.</documentation>
        </annotation>
      </element>
      <!--
      DarcMail: Account().folders[0].messages[0].darcmail_get_int_body_content().
      Needs to get added by DarcMail.
      
      Always write as CDATA, so make sure you escape pre-existing CDATA markers.
      I'm seeing some XML esscaped line breaks in text/plain quoted-printable examples.
      See:
        https://github.com/python/cpython/blob/3.7/Lib/email/message.py
      and:
        SingleBodyType.py def is_readable()
      to figure out what to write internall VS externally.
      
      -->
      <element name="CharSet" type="string" minOccurs="0">
        <annotation>
          <documentation>The character encoding that was used when preparing the contents of this internal body part. If not present then the character encoding specified by the "encoding" element in the prologue of this XML document is assumed.</documentation>
        </annotation>
      </element>
      <!-- DarcMail: Account().charset
      
      This refers to the encoding used by the parser, i.e. DarcMail.
      Note reference to "this XML document". Is XSD assuming that means the XSD itself or that the EAXS will necessarily have an encoding declaration???
      -->
      <element name="TransferEncoding" type="string" minOccurs="0">
        <annotation>
          <documentation>If not present, then it is assumed that this is not necessary since it is implied by the "encoding" element in the prologue of this XML document.</documentation>
        </annotation>
      </element>
      <!-- This appears to be 
      
      The meaning of this within int-body context is very confusing.
      -->
    </sequence>
  </complexType>
  <complexType name="ext-body-content-type">
    <sequence>
      <element name="RelPath" type="anyURI">
        <annotation>
          <documentation>Path component that when added to the result obtained from adding the RelPath for this message to the absolute path from which this XML file was accessed gives the path to the externally stored body part.</documentation>
        </annotation>
      </element>
      <!--
      DarcMail: 
      attachment_hash = Account().hash(
      os.path.join(Account().output_path, "attachments", 
      
      i.e. relative to the EAXS file
      Filename should be two parts: {Hash of filename} _ {Hash of data}.xml
      If the file already exists, don't rewrite it.
      
      Should re-implement the thing that prevents redundant RTF copies of messages?
      ???
	  
	  "the absolute path from which this XML file was accessed" - how is this possible to know from WHERE it will be ACCESSED? It should be relative to the EAXS path.
      -->
      <element name="CharSet" type="string" minOccurs="0">
        <annotation>
          <documentation>The character encoding that was used when preparing the contents of this external body part. If not present then the original character encoding specified by the "Charset" element of the containing SingleBody element is assumed.</documentation>
        </annotation>
      </element>
      <!-- !!!Start Here!!!
      Big problem: The external file format doesn't appear to be based on a schema.
      It might have been invented for DarcMail by Smithsonian.
      
      ??? If Base64 this is irrelevant. -->
      <element name="TransferEncoding" type="string" minOccurs="0">
        <annotation>
          <documentation>The transfer encoding that was used when preparing the contents of this external body part. If not present then the original character encoding specified by the "TransferEncoding" element of the containing SingleBody element is assumed.</documentation>
        </annotation>
      </element>
      <!-- This will be base64 for external files. 
      Should be able to do this and say XMLWrapped is False and be done with it.
      -->
      <element name="LocalId" type="integer"/>
	  <!-- Notice that this doesn't enforce uniqueness even though that's obviously what's desired. And this is an "integer" not "long" like the others. 
	  This could theoretically conflict with the long LocalId. But not really: because there is no enforced uniqueness AND they are two diffrently pathed elements albeit with 
	  the same element basename.
	  Also see: http://books.xmlschemata.org/relaxng/ch19-77183.html -->
      <element name="XMLWrapped" type="boolean" minOccurs="0">
        <annotation>
          <documentation>If this externally stored body part is wrapped in an XML envelope then this element must be present and have a value of true. If the externally stored body part is stored as a "native" file without any XML wrapper then either this element will not be present or will be present and have a value of false.</documentation>
        </annotation>
      </element>
      <!-- Unclear what "native" means. -->
      <element name="Eol" type="xm:eol-type" minOccurs="0"/>
      <!-- Skip. -->
      <element name="Hash" type="xm:hash-type" minOccurs="0">
        <annotation>
          <documentation>The results of some hash function computed on the entire contents of the external file.</documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <group name="message-headers">
    <annotation>
      <documentation>These are the headers that can be used for a top-level message or for a child message. Top-level messages should have the "From", "Date", and at least one destination header ("To" "Cc", or "Bcc"); child messages should have at least one of "From", "Subject", or "Date".</documentation>
    </annotation>
    <sequence>
      <element name="OrigDate" type="dateTime" minOccurs="0"/>
      <element name="From" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Sender" type="string" minOccurs="0"/>
      <element name="To" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Cc" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Bcc" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="InReplyTo" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="References" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Subject" type="string" minOccurs="0"/>
      <element name="Comments" type="string" minOccurs="0" maxOccurs="unbounded"/>
      <element name="Keywords" type="string" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </group>
  <simpleType name="message-status-flag">
    <restriction base="string">
      <enumeration value="Seen"/>
      <enumeration value="Answered"/>
      <enumeration value="Flagged"/>
      <enumeration value="Deleted"/>
      <enumeration value="Draft"/>
      <enumeration value="Recent"/>
    </restriction>
  </simpleType>
  <complexType name="header-type">
    <annotation>
      <documentation>HeaderType is used to contain the contents of a single header the child element name stores the name of the header, while the child element value stores the contents of the header.</documentation>
    </annotation>
    <sequence>
      <element name="Name" type="string"/>
      <element name="Value" type="string"/>
      <element name="Comments" type="string" minOccurs="0"/>
    </sequence>
  </complexType>
  <complexType name="parameter-type">
    <sequence>
      <element name="Name" type="string"/>
      <element name="Value" type="string"/>
    </sequence>
  </complexType>
  <complexType name="incomplete-parse-type">
    <sequence>
      <element name="ErrorType" type="string"/>
      <element name="ErrorLocation" type="string" minOccurs="0"/>
    </sequence>
  </complexType>
  <!-- DarcMail: Account().folders.[0].mbox attribute. -->
  <complexType name="mbox-type">
    <sequence>
      <element name="RelPath" type="string">
        <annotation>
          <documentation>URI component that when added to the path from which this XML file was accessed will give the URI from which the mbox full of original messages may be retrieved.</documentation>
        </annotation>
      </element>
      <element name="Eol" type="xm:eol-type"/>
      <element name="Hash" type="xm:hash-type" minOccurs="0"/>
    </sequence>
  </complexType>
  <!-- DarcMail: Account().folders.[0].mbox attribute. -->
  <simpleType name="eol-type">
    <restriction base="string">
      <enumeration value="CR"/>
      <enumeration value="LF"/>
      <enumeration value="CRLF"/>
    </restriction>
  </simpleType>
  <!-- DarcMail: Account().folders.[0].mbox attribute. -->
  <complexType name="hash-type">
    <sequence>
      <element name="Value" type="hexBinary">
        <annotation>
          <documentation>Values of hash-type must be computed by the hash algorithm specified. Please use the canonical form: only upper case letters should be used.)</documentation>
        </annotation>
      </element>
      <element name="Function" type="xm:hash-function-type"/>
    </sequence>
  </complexType>
  <!-- DarcMail: Account().folders.[0].mbox attribute. -->
  <simpleType name="hash-function-type">
    <restriction base="string">
      <enumeration value="MD5">
        <annotation>
          <documentation>As defined by RFC 1321</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WHIRLPOOL">
        <annotation>
          <documentation>As adopted by ISO/IEC 10118-3:2004</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SHA1">
        <annotation>
          <documentation>As defined by NIST FIPS PUB 180-2</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SHA224">
        <annotation>
          <documentation>As defined by NIST FIPS PUB 180-2</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SHA256">
        <annotation>
          <documentation>As defined by NIST FIPS PUB 180-2</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SHA384">
        <annotation>
          <documentation>As defined by NIST FIPS PUB 180-2</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SHA512">
        <annotation>
          <documentation>As defined by NIST FIPS PUB 180-2</documentation>
        </annotation>
      </enumeration>
      <enumeration value="RIPEMD160">
        <annotation>
          <documentation>As defined by ISO/IEC 10118-3:2003</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>