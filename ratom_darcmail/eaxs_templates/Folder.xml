<!--# 
This template represents the EAXS <Folder> element.
It is related to the lib.folder_object.FolderObject module.
#-->

<!--# Create a list to track open <Folder> elements. #-->
{% set OPENED_FOLDERS = [] %}

<!--# The "main loop", i.e. creates <Folder> elements for each FolderObject. #-->
{% for folder in DarcMail.account.get_folders() %}
    
<!--# Close open <Folder> elements from previous iterations of the main loop. #-->
{% for open_folder in EAXSHelpers.close_folders(folder, OPENED_FOLDERS) %}
</Folder>
{% endfor %}

<!--# Add <Folder> child elements. #-->
<Folder>
    <Name>{{ folder.basename }}</Name>
    <!--# Add <Message> elements. #-->
    {% for message in folder.get_messages() %}
        {% filter indent(width=4, first=True) %}
            {% include "Message.xml" %}
        {% endfilter %}
    {% endfor %}

    <!--# If the account is an MBOX, add <Mbox> element. #-->
    {% if not DarcMail.account.is_eml %}
    {% for mbox in [] %}
    <!--# TODO: Work on this. Per the XSD there MUST only be one MBOX file, so this should be
    "mbox in folder.get_files()" and then use a "break" or "loop.first" per 
    https://stackoverflow.com/a/34887399.
    But the issue is also that you should raise an error (or perhaps just a warning) if there's more
    than one MBOX file. GMAIL uses more than one MBOX file! So you either need to skip this
    Best option might be to create a new addon function to send back the first MBOX file AND the
    count of files. If more than 1, this HAS to be skipped. #-->
    <Mbox>
        <RelPath>{{ mbox }}</RelPath>
        <<Eol>{{ EAXSHelpers.get_eol(mbox) }}</Eol>
        <!--# 
        The <Hash> element is not implemented.
        It seems METS, Bagger, etc. would be better options for storing file checksums.
        #-->
    </Mbox>
    {% endfor %}
    {% endif %}

{% endfor%}

<!--# Close remaining <Folder> elements.
Even though the output isn't effected, it's more proper to use "reverse" because each @folder in
@OPENED_FOLDERS is a child of the item that precedes it. #-->
{% for folder in OPENED_FOLDERS |reverse %}
</Folder>
{% endfor %}
