<!--# 
This template represents the EAXS <Message> element.
It is related to the lib.message_object.MessageObject module.

Note: the custom "skipnull" filter is used so that elements with null values will not appear in the
rendered EAXS file.

TODO:
* For this and all included templates you need to make sure the correct xs:type will always be
present (valid identifiers, etc.).
#-->

<Message>

    <!--# A comment is the only legitimate way or storing the source file name for EMLs.
    see: https://github.com/StateArchivesOfNorthCarolina/tomes-eaxs/issues/5
    see: https://github.com/StateArchivesOfNorthCarolina/tomes-eaxs/issues/4
    #-->
    <!-- source: {{ message.rel_path | normalize_path }} -->
    <RelPath>{{ message.folder.rel_path |normalize_path }}</RelPath>
    <LocalId>{{ message.local_id }}</LocalId>

    <!--# If the "message-id" header doesn't exist, make an id and set @Supplied to True.
    NOTE: Actually, per the XSD if no message id is supplied, you MUST hash the message so that
    the message can be found insde the MBOX file later - BTW doesn't what defeat the point of having
    EAXS (if the MBOX still should be able to be referenced after the fact)?
     #-->
    {% set message_id = message.get("message-id") %}
    {% set message_el = (message_id, "false") if message_id else ("{}_{}".format(
        message.account.global_id, message.local_id), "true") %}
    <MessageId Supplied="{{ message_el[1] }}">{{ message_el[0] |cdata |trim }}</MessageId>
    
    <MimeVersion>{{ message.get("mime-version") }}</MimeVersion>

    <!--# 
    TODO: CHECK ALL .get() string request values! Are you using the right ones?
    TODO: These need to be repeatable: TO, CC, BCC, IN REPLY TO, REFERENCES, COMMENTS, KEYWORDS.
    TODO: Is Sender always returned? If it's xs:string does it matter since blanks are OK?
    #-->
    <OrigDate>{{ message.get("orig-date") |skipnull }}</OrigDate>
    <From>{{ message.get("from") |cdata |trim }}</From>
    <Sender>{{ message.get("sender") |cdata |trim }}</Sender>
    <To>{{ message.get("to") |cdata |trim }}</To>
    <Cc>{{ message.get("cc") |skipnull |cdata |trim }}</Cc>
    <Bcc>{{ message.get("bcc") |skipnull |cdata |trim }}</Bcc>
    <InReplyTo>{{ message.get("in-reply-to") |skipnull |cdata |trim }}</InReplyTo>
    <References>{{ message.get("references") |skipnull |cdata |trim }}</References>
    <Subject>{{ message.get("subject") |cdata |trim }}</Subject>
    <Comments>{{ message.get("comments") |skipnull |cdata |trim }}</Comments>
    <Keywords>{{ message.get("keywords") |skipnull |cdata |trim }}</Keywords> 

    <!--#
    TODO: What's the source for the optional <Comments> element? I can't find anything in RFC 4021
    (at least I think that's the correct spec to look at).
    #-->
    {% for name, value in message.items() %}
    <Header>
        <Name>{{ name }}</Name>
        <Value>{{ value |cdata |trim }}</Value>
        <!--# <Comments></Comments> #-->
    </Header>
    {% endfor %}

    <!--#
    TODO: Create lib.addons.get_status_flags.py so that you can just return a list of status flags a la:
	    {% for status_flag in EAXSHelpers.get_status_flags() %}
			<StatusFlag>{{ status_flag }}</StatusFlag>
		{% endfor %}
	
    And document that this logic is based on
		https://wingware.com/psupport/python-manual/2.5/lib/mailbox-mboxmessage.html

    Also, is there support for "Draft" or "Recent" in other DarcMail packages?
	Find out and add it to the the module or at least document as needed. 
    #-->
    {% set status = message.get("status", failobj="") + message.get("x-status", failobj="") %}
    {% set status_dict = {"R": "Seen", "A": "Answered", "F": "Flagged", "D": "Deleted"} %}
    {% for status_item in status |trim %}
    <StatusFlag>{{ status_dict.get(status_item) |skipnull }}</StatusFlag>
    {% endfor %}

    <!--# Add <MultiBody> element for a multi-part message; otherwise add <SingleBody>.
    Note: SingleBody.xml needs an object called @msg, hence the "set msg = message" below. #-->
    {% if not message.is_multipart() %}
        {% set msg = message %}
        {% filter indent(width=4, first=True) %}
            {% include "SingleBody.xml" %}
        {% endfilter %}
    {% else %}
        {% filter indent(width=4, first=True) %}
            {% include "MultiBody.xml" %}
        {% endfilter %}
    {% endif %}

    {% for error in message.parse_errors %}
    <Incomplete>
        <ErrorType>Python: {{ error["exception_object"].__str__() }}</ErrorType>
        <ErrorLocation>{{ error["traceback_lines"] }}</ErrorLocation>
    </Incomplete>
    {% endfor %}

    <Eol>{{ EAXSHelpers.get_eol(message) }}</Eol>

</Message>

<!--# Force a line break. #-->
{% raw %}{% endraw %}
